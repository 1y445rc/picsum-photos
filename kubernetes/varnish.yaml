apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: varnish
spec:
  selector:
    matchLabels:
      app: varnish
  replicas: 2
  podManagementPolicy: Parallel # Needed to launch all pods in parallel so that DNS starts resolving
  serviceName: varnish
  template:
    metadata:
      labels:
        app: varnish
    spec:
      volumes:
      - name: config
        configMap:
          name: varnish-config
      - name: cache
        emptyDir: {}
      containers:
      - name: varnish
        image: 'dmarby/picsum-photos-varnish@sha256:b587fe7beb4ae742a0d32f022b824371c73a51c6243c21c0868a4bf96eb506a0'
        args:
        - -F
        - -f/usr/local/etc/varnish/default.vcl
        - -sfile,/cache/varnish-cache,20G # 20GB on disk will take about 2.5GB of ram
        - -sTransient=malloc,100M # Limit the transient ram to avoid getting the container killed from OOM
        volumeMounts:
        - name: config
          mountPath: /usr/local/etc/varnish
        - name: cache
          mountPath: /cache
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /varnish_health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /varnish_health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: 0.1
          limits:
            memory: 2.5Gi
            cpu: 0.25

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    # Needed for the DNS to resolve before liveness/readiness has occured
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: varnish
  labels:
    app: varnish
spec:
  # Needed for the DNS to resolve before liveness/readiness has occured
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    app: varnish
  ports:
  - port: 80
    name: varnish
